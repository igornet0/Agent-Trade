#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –≤–Ω—É—Ç—Ä–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
"""

import asyncio
import hashlib
import asyncpg
import sys

async def create_all_tables_docker_container():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ Docker PostgreSQL"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Docker PostgreSQL (–≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
        conn = await asyncpg.connect(
            user='agent',
            password='agent',
            database='agent',
            host='postgres',  # –ò–º—è —Å–µ—Ä–≤–∏—Å–∞ –≤ docker-compose
            port=5432
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                login VARCHAR(50) UNIQUE NOT NULL,
                email VARCHAR(50) UNIQUE,
                password VARCHAR(255) NOT NULL,
                user_telegram_id BIGINT,
                balance FLOAT DEFAULT 0,
                role VARCHAR(50) DEFAULT 'user',
                active BOOLEAN DEFAULT TRUE
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞!")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É coins
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS coins (
                id SERIAL PRIMARY KEY,
                name VARCHAR(50) UNIQUE NOT NULL,
                price_now FLOAT DEFAULT 0,
                max_price_now FLOAT DEFAULT 0,
                min_price_now FLOAT DEFAULT 0,
                open_price_now FLOAT DEFAULT 0,
                volume_now FLOAT DEFAULT 0,
                price_change_percentage_24h FLOAT,
                news_score_global FLOAT DEFAULT 100,
                parsed BOOLEAN DEFAULT TRUE
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ coins —Å–æ–∑–¥–∞–Ω–∞!")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É timeseries
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS timeseries (
                id SERIAL PRIMARY KEY,
                coin_id INTEGER REFERENCES coins(id),
                timestamp VARCHAR(50),
                path_dataset VARCHAR(100) UNIQUE
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ timeseries —Å–æ–∑–¥–∞–Ω–∞!")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É data_timeseries
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS data_timeseries (
                id SERIAL PRIMARY KEY,
                timeseries_id INTEGER REFERENCES timeseries(id),
                datetime TIMESTAMP NOT NULL,
                open FLOAT,
                max FLOAT,
                min FLOAT,
                close FLOAT,
                volume FLOAT
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ data_timeseries —Å–æ–∑–¥–∞–Ω–∞!")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É portfolio
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS portfolio (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id),
                coin_id INTEGER REFERENCES coins(id),
                amount FLOAT DEFAULT 0.0,
                price_avg FLOAT DEFAULT 0.0,
                CONSTRAINT uq_portfolio_user_coin UNIQUE (user_id, coin_id),
                CONSTRAINT ck_portfolio_amount_non_negative CHECK (amount >= 0)
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ portfolio —Å–æ–∑–¥–∞–Ω–∞!")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É transactions
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS transactions (
                id SERIAL PRIMARY KEY,
                status VARCHAR(30) DEFAULT 'open',
                user_id INTEGER REFERENCES users(id),
                coin_id INTEGER REFERENCES coins(id),
                type VARCHAR(20) NOT NULL,
                amount_orig FLOAT NOT NULL,
                amount FLOAT NOT NULL,
                price FLOAT NOT NULL
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions —Å–æ–∑–¥–∞–Ω–∞!")
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        hashed_password = hashlib.sha256('admin123'.encode()).hexdigest()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await conn.fetchrow(
            "SELECT id FROM users WHERE login = $1 OR email = $2",
            'admin', 'admin@agent-trade.com'
        )
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await conn.execute("""
                INSERT INTO users (login, email, password, role, active, balance)
                VALUES ($1, $2, $3, $4, $5, $6)
            """, 'admin', 'admin@agent-trade.com', hashed_password, 'admin', True, 0.0)
            print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω!")
        else:
            print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        
        await conn.close()
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

async def main():
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ Docker PostgreSQL...")
    success = await create_all_tables_docker_container()
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤—ã!")
        print("   –õ–æ–≥–∏–Ω: admin")
        print("   Email: admin@agent-trade.com")
        print("   –ü–∞—Ä–æ–ª—å: admin123")
        print("   –†–æ–ª—å: admin")
    else:
        print("\nüí• –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã.")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())

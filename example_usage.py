# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
# –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏

import torch
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from crypto_trading_agent import (
    AdaptiveLearningAgent, 
    train_crypto_trading_agent, 
    test_agent_trading,
    TradingLabelGenerator,
    CryptoDataset
)

from multi_agent_ensemble import (
    MultiAgentEnsemble,
    create_and_train_ensemble,
    run_real_time_trading
)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

def example_1_single_agent_training():
    """–ü—Ä–∏–º–µ—Ä 1: –û–±—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è BTC"""
    print("\n" + "="*50)
    print("–ü–†–ò–ú–ï–† 1: –û–±—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è BTC")
    print("="*50)
    
    try:
        # –û–±—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è BTC
        btc_agent = train_crypto_trading_agent("BTC")
        
        if btc_agent:
            print("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω!")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
            print("\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            test_results = test_agent_trading(btc_agent, test_period_days=3)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            performance = btc_agent.get_performance_summary()
            print("\nüìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞:")
            for key, value in performance.items():
                if key != 'model_weights':
                    print(f"  {key}: {value}")
            
            return btc_agent
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –∞–≥–µ–Ω—Ç–∞")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
        return None

def example_2_ensemble_training():
    """–ü—Ä–∏–º–µ—Ä 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\n" + "="*50)
    print("–ü–†–ò–ú–ï–† 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è –∞–≥–µ–Ω—Ç–æ–≤")
    print("="*50)
    
    try:
        # –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        coins_to_trade = ["BTC", "ETH", "ADA"]
        
        print(f"–°–æ–∑–¥–∞–µ–º –∞–Ω—Å–∞–º–±–ª—å –¥–ª—è {len(coins_to_trade)} –º–æ–Ω–µ—Ç: {', '.join(coins_to_trade)}")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –∞–Ω—Å–∞–º–±–ª—å
        ensemble = create_and_train_ensemble(coins_to_trade, device)
        
        print("‚úÖ –ê–Ω—Å–∞–º–±–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–±—É—á–µ–Ω!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤
        print("\nüìä –í–µ—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤ –≤ –∞–Ω—Å–∞–º–±–ª–µ:")
        for coin, weight in ensemble.agent_weights.items():
            print(f"  {coin}: {weight:.3f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é
        portfolio = ensemble.get_portfolio_summary()
        print("\nüí∞ –°–≤–æ–¥–∫–∞ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é:")
        print(f"  –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${portfolio['total_value']:.2f}")
        print(f"  –ù–∞–ª–∏—á–Ω—ã–µ: ${portfolio['cash']:.2f}")
        print(f"  –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: ${portfolio['realized_pnl']:.2f}")
        print(f"  –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {portfolio['total_return']:.2f}%")
        
        return ensemble
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω—Å–∞–º–±–ª—è: {e}")
        return None

def example_3_custom_agent_configuration():
    """–ü—Ä–∏–º–µ—Ä 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("\n" + "="*50)
    print("–ü–†–ò–ú–ï–† 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    print("="*50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ—Ç–æ–∫
        custom_label_generator = TradingLabelGenerator(
            profit_threshold=0.015,  # 1.5% –ø—Ä–∏–±—ã–ª–∏
            stop_loss=0.008          # 0.8% —É–±—ã—Ç–∫–∞
        )
        
        print("–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ—Ç–æ–∫:")
        print(f"  –ü–æ—Ä–æ–≥ –ø—Ä–∏–±—ã–ª–∏: {custom_label_generator.profit_threshold:.3f}")
        print(f"  –°—Ç–æ–ø-–ª–æ—Å—Å: {custom_label_generator.stop_loss:.3f}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç
        from core import data_helper
        from backend.Dataset import DatasetTimeseries
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ETH
        eth_file = None
        for file in data_helper.get_path("processed", timetravel="5m"):
            if "ETH" in str(file):
                eth_file = file
                break
        
        if eth_file:
            eth_data = DatasetTimeseries(eth_file).get_dataset()
            print(f"\n–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ ETH: {eth_data.shape}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç
            custom_dataset = CryptoDataset(
                data=eth_data,
                seq_len=60,      # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                pred_len=8,      # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                normalize=True
            )
            
            print(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç:")
            print(f"  –†–∞–∑–º–µ—Ä: {len(custom_dataset)}")
            print(f"  –î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {custom_dataset.seq_len}")
            print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {custom_dataset.pred_len}")
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            custom_agent = AdaptiveLearningAgent(
                coin_name="ETH_CUSTOM",
                data=eth_data,
                device=device
            )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            custom_agent.seq_len = 60
            custom_agent.pred_len = 8
            custom_agent.learning_rate = 0.0005  # –ú–µ–Ω—å—à–∏–π learning rate
            custom_agent.batch_size = 64         # –ë–æ–ª—å—à–∏–π batch size
            custom_agent.epochs = 15             # –ë–æ–ª—å—à–µ —ç–ø–æ—Ö
            
            print(f"\n–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–≥–µ–Ω—Ç:")
            print(f"  Learning rate: {custom_agent.learning_rate}")
            print(f"  Batch size: {custom_agent.batch_size}")
            print(f"  Epochs: {custom_agent.epochs}")
            
            return custom_agent
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ETH")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≥–µ–Ω—Ç–∞: {e}")
        return None

def example_4_backtesting_strategy():
    """–ü—Ä–∏–º–µ—Ä 4: –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("\n" + "="*50)
    print("–ü–†–ò–ú–ï–† 4: –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    print("="*50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        from core import data_helper
        from backend.Dataset import DatasetTimeseries
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è DOT
        dot_file = None
        for file in data_helper.get_path("processed", timetravel="5m"):
            if "DOT" in str(file):
                dot_file = file
                break
        
        if dot_file:
            dot_data = DatasetTimeseries(dot_file).get_dataset()
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ DOT: {dot_data.shape}")
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            backtest_agent = AdaptiveLearningAgent(
                coin_name="DOT_BACKTEST",
                data=dot_data,
                device=device
            )
            
            # –û–±—É—á–∞–µ–º –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            print("–û–±—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            train_loader, val_loader = backtest_agent.prepare_data()
            backtest_agent.train_models(train_loader, val_loader)
            
            # –ë—ç–∫—Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            print("\n–ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥...")
            backtest_results = test_agent_trading(backtest_agent, test_period_days=7)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            performance = backtest_agent.get_performance_summary()
            
            print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞:")
            print(f"  –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {performance['total_trades']}")
            print(f"  –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {performance['successful_trades']}")
            print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {performance['success_rate']:.2%}")
            print(f"  –û–±—â–∏–π P&L: ${performance['total_pnl']:.4f}")
            print(f"  –°—Ä–µ–¥–Ω–∏–π P&L: ${performance['average_pnl']:.4f}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–æ–∫
            if backtest_results:
                print(f"\nüìà –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–æ–∫:")
                for i, result in enumerate(backtest_results[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"  –°–¥–µ–ª–∫–∞ {i+1}: {result['action']} –ø–æ —Ü–µ–Ω–µ ${result['price']:.4f}, "
                          f"P&L: ${result['profit_loss']:.4f}")
                
                if len(backtest_results) > 5:
                    print(f"  ... –∏ –µ—â–µ {len(backtest_results) - 5} —Å–¥–µ–ª–æ–∫")
            
            return backtest_agent
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è DOT")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–µ: {e}")
        return None

def example_5_risk_management():
    """–ü—Ä–∏–º–µ—Ä 5: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã"""
    print("\n" + "="*50)
    print("–ü–†–ò–ú–ï–† 5: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã")
    print("="*50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        from core import data_helper
        from backend.Dataset import DatasetTimeseries
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LINK
        link_file = None
        for file in data_helper.get_path("processed", timetravel="5m"):
            if "LINK" in str(file):
                link_file = file
                break
        
        if link_file:
            link_data = DatasetTimeseries(link_file).get_dataset()
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ LINK: {link_data.shape}")
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–∏—Å–∫–∞
            risk_agent = AdaptiveLearningAgent(
                coin_name="LINK_RISK",
                data=link_data,
                device=device
            )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
            risk_agent.stop_loss = 0.015        # 1.5% —Å—Ç–æ–ø-–ª–æ—Å—Å
            risk_agent.take_profit = 0.03       # 3% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            
            print("–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏:")
            print(f"  –°—Ç–æ–ø-–ª–æ—Å—Å: {risk_agent.stop_loss:.3f}")
            print(f"  –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {risk_agent.take_profit:.3f}")
            
            # –û–±—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            print("\n–û–±—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞...")
            train_loader, val_loader = risk_agent.prepare_data()
            risk_agent.train_models(train_loader, val_loader)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏
            print("\n–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏...")
            test_results = test_agent_trading(risk_agent, test_period_days=5)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            performance = risk_agent.get_performance_summary()
            
            print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏:")
            print(f"  –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {performance['total_trades']}")
            print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {performance['success_rate']:.2%}")
            print(f"  –û–±—â–∏–π P&L: ${performance['total_pnl']:.4f}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ P&L
            if test_results:
                pnl_values = [result['profit_loss'] for result in test_results]
                max_profit = max(pnl_values) if pnl_values else 0
                max_loss = min(pnl_values) if pnl_values else 0
                
                print(f"\nüìà –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤:")
                print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${max_profit:.4f}")
                print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: ${max_loss:.4f}")
                print(f"  –î–∏–∞–ø–∞–∑–æ–Ω P&L: ${max_profit - max_loss:.4f}")
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                if len(pnl_values) > 1:
                    mean_pnl = np.mean(pnl_values)
                    std_pnl = np.std(pnl_values)
                    if std_pnl > 0:
                        sharpe_ratio = mean_pnl / std_pnl
                        print(f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {sharpe_ratio:.3f}")
            
            return risk_agent
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è LINK")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏: {e}")
        return None

def example_6_ensemble_optimization():
    """–ü—Ä–∏–º–µ—Ä 6: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–Ω—Å–∞–º–±–ª—è –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\n" + "="*50)
    print("–ü–†–ò–ú–ï–† 6: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–Ω—Å–∞–º–±–ª—è –∞–≥–µ–Ω—Ç–æ–≤")
    print("="*50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–Ω—Å–∞–º–±–ª—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏
        coins_to_optimize = ["BTC", "ETH", "ADA", "DOT", "LINK"]
        print(f"–°–æ–∑–¥–∞–µ–º –∞–Ω—Å–∞–º–±–ª—å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {', '.join(coins_to_optimize)}")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –∞–Ω—Å–∞–º–±–ª—å
        ensemble = create_and_train_ensemble(coins_to_optimize, device)
        
        if ensemble:
            print("‚úÖ –ê–Ω—Å–∞–º–±–ª—å —Å–æ–∑–¥–∞–Ω!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞
            print("\nüìä –ù–∞—á–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤:")
            for coin, weight in ensemble.agent_weights.items():
                print(f"  {coin}: {weight:.3f}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–∏–∫–ª–æ–≤ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            print("\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –≤–µ—Å–æ–≤...")
            
            for cycle in range(3):
                print(f"\n–¶–∏–∫–ª –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ {cycle + 1}/3:")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                for coin_name, agent in ensemble.agents.items():
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    test_data = agent.data.tail(agent.seq_len * 2)
                    
                    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
                    for i in range(5):
                        current_slice = test_data.iloc[i:i+agent.seq_len]
                        decision = agent.make_trading_decision(current_slice)
                        trade_result = agent.execute_trade(decision)
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–µ—Å–∞
                ensemble.adaptive_weight_adjustment()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–µ—Å–∞
                print(f"  –í–µ—Å–∞ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞ {cycle + 1}:")
                for coin, weight in ensemble.agent_weights.items():
                    print(f"    {coin}: {weight:.3f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞
            print("\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
            for coin, weight in ensemble.agent_weights.items():
                print(f"  {coin}: {weight:.3f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é
            portfolio = ensemble.get_portfolio_summary()
            print(f"\nüí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é:")
            print(f"  –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${portfolio['total_value']:.2f}")
            print(f"  –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {portfolio['total_return']:.2f}%")
            
            return ensemble
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω—Å–∞–º–±–ª—å")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–Ω—Å–∞–º–±–ª—è: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∑–∞–ø—É—Å–∫–æ–º –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–ú–ï–†–û–í –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –û–ë–£–ß–ï–ù–ò–Ø –¢–û–†–ì–û–í–´–• –ê–ì–ï–ù–¢–û–í")
    print("="*80)
    
    # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    examples = [
        ("–û–±—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è BTC", example_1_single_agent_training),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è –∞–≥–µ–Ω—Ç–æ–≤", example_2_ensemble_training),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏", example_3_custom_agent_configuration),
        ("–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", example_4_backtesting_strategy),
        ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã", example_5_risk_management),
        ("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–Ω—Å–∞–º–±–ª—è –∞–≥–µ–Ω—Ç–æ–≤", example_6_ensemble_optimization)
    ]
    
    results = {}
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã
    for i, (name, func) in enumerate(examples, 1):
        print(f"\n{'='*20} –ü–†–ò–ú–ï–† {i}/6 {'='*20}")
        print(f"üìã {name}")
        
        try:
            result = func()
            results[name] = result
            print(f"‚úÖ –ü—Ä–∏–º–µ—Ä {i} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ {i}: {e}")
            results[name] = None
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ü–†–ò–ú–ï–†–û–í")
    print("="*80)
    
    successful_examples = sum(1 for result in results.values() if result is not None)
    total_examples = len(examples)
    
    print(f"–í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {total_examples}")
    print(f"–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {successful_examples}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {successful_examples/total_examples*100:.1f}%")
    
    if successful_examples > 0:
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –î–ê–õ–¨–ù–ï–ô–®–ï–ú–£ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
        print("1. –ù–∞—á–Ω–∏—Ç–µ —Å –æ–±—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è BTC (–ø—Ä–∏–º–µ—Ä 1)")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω—Å–∞–º–±–ª—å –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–Ω–µ—Ç (–ø—Ä–∏–º–µ—Ä 2)")
        print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ (–ø—Ä–∏–º–µ—Ä 5)")
        print("4. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –≤–µ—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤ (–ø—Ä–∏–º–µ—Ä 6)")
        print("5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–ª—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        
        print("\nüí° –î–õ–Ø –ó–ê–ü–£–°–ö–ê –¢–û–†–ì–û–í–õ–ò –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò:")
        print("python multi_agent_ensemble.py")
    
    print("\n" + "="*80)
    print("üèÅ –í–°–ï –ü–†–ò–ú–ï–†–´ –ó–ê–í–ï–†–®–ï–ù–´")

if __name__ == "__main__":
    main()

import requests
import time
import json

def test_ui_backend_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UI —Å backend"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Backend")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å frontend
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ frontend...")
    try:
        response = requests.get("http://localhost:5173", timeout=5)
        assert response.status_code == 200
        assert "Agent Trade" in response.text
        print("‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend...")
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "healthy"
        print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    try:
        response = requests.get("http://localhost:8000/api_db_agent/models", timeout=5)
        assert response.status_code == 200
        data = response.json()
        assert "models" in data
        assert len(data["models"]) > 0
        print(f"‚úÖ API –º–æ–¥–µ–ª–µ–π: {len(data['models'])} –º–æ–¥–µ–ª–µ–π")
    except Exception as e:
        print(f"‚ùå API –º–æ–¥–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ API...")
    try:
        test_payload = {
            "model_id": 1,
            "coins": [1, 2],
            "timeframe": "5m",
            "start_date": "2024-01-01",
            "end_date": "2024-01-02",
            "metrics": ["accuracy", "precision"]
        }
        
        response = requests.post("http://localhost:8000/api_db_agent/test_model", 
                               json=test_payload, timeout=10)
        assert response.status_code in [200, 202]
        data = response.json()
        assert "task_id" in data
        task_id = data["task_id"]
        print(f"‚úÖ –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—â–µ–Ω: {task_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        time.sleep(2)
        response = requests.get(f"http://localhost:8000/api_db_agent/task/{task_id}", timeout=5)
        assert response.status_code == 200
        task_data = response.json()
        assert "state" in task_data
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {task_data['state']}")
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        return False
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫...")
    try:
        response = requests.get("http://localhost:8000/metrics", timeout=5)
        assert response.status_code == 200
        metrics_text = response.text
        assert "http_requests_total" in metrics_text
        assert "ml_model_train_total" in metrics_text
        print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
    except Exception as e:
        print(f"‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        return False
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    print("\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    # Prometheus
    try:
        response = requests.get("http://localhost:9090/api/v1/targets", timeout=5)
        assert response.status_code == 200
        data = response.json()
        targets = data["data"]["activeTargets"]
        print(f"‚úÖ Prometheus: {len(targets)} targets")
    except Exception as e:
        print(f"‚ùå Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # Grafana
    try:
        response = requests.get("http://localhost:3000/api/health", timeout=5)
        assert response.status_code == 200
        data = response.json()
        assert data["database"] == "ok"
        print("‚úÖ Grafana –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS
    print("\n7. –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS...")
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º CORS preflight
        headers = {
            'Origin': 'http://localhost:5173',
            'Access-Control-Request-Method': 'GET',
            'Access-Control-Request-Headers': 'Content-Type'
        }
        response = requests.options("http://localhost:8000/api_db_agent/models", 
                                  headers=headers, timeout=5)
        print("‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è  CORS –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã UI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True

def test_production_readiness():
    """–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"""
    
    print("\nüè≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoints
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoints...")
    services = [
        ("Frontend", "http://localhost:5173"),
        ("Backend", "http://localhost:8000/health"),
        ("Prometheus", "http://localhost:9090/-/healthy"),
        ("Grafana", "http://localhost:3000/api/health"),
        ("Alertmanager", "http://localhost:9093/-/healthy")
    ]
    
    healthy_services = 0
    for name, url in services:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                healthy_services += 1
                print(f"‚úÖ {name} –∑–¥–æ—Ä–æ–≤")
            else:
                print(f"‚ö†Ô∏è  {name} –Ω–µ–∑–¥–æ—Ä–æ–≤ (status: {response.status_code})")
        except Exception as e:
            print(f"‚ùå {name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    print(f"üìä –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {healthy_services}/{len(services)} —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫...")
    try:
        response = requests.get("http://localhost:8000/metrics", timeout=5)
        assert response.status_code == 200
        metrics_text = response.text
        
        required_metrics = [
            "http_requests_total",
            "http_request_duration_seconds",
            "ml_model_train_total",
            "ml_train_duration_seconds"
        ]
        
        missing_metrics = []
        for metric in required_metrics:
            if metric not in metrics_text:
                missing_metrics.append(metric)
        
        if missing_metrics:
            print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç—Ä–∏–∫–∏: {missing_metrics}")
        else:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints...")
    api_endpoints = [
        ("GET", "/api_db_agent/models"),
        ("POST", "/api_db_agent/test_model"),
        ("GET", "/metrics"),
        ("GET", "/health")
    ]
    
    working_endpoints = 0
    for method, endpoint in api_endpoints:
        try:
            if method == "GET":
                response = requests.get(f"http://localhost:8000{endpoint}", timeout=5)
            elif method == "POST":
                response = requests.post(f"http://localhost:8000{endpoint}", 
                                       json={}, timeout=5)
            
            if response.status_code in [200, 202]:
                working_endpoints += 1
                print(f"‚úÖ {method} {endpoint}")
            else:
                print(f"‚ö†Ô∏è  {method} {endpoint} (status: {response.status_code})")
        except Exception as e:
            print(f"‚ùå {method} {endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    print(f"üìä API endpoints: {working_endpoints}/{len(api_endpoints)} —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    # 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:")
    recommendations = [
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã",
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é",
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±—ç–∫–∞–ø—ã –ë–î",
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–µ—Ä—Ç—ã",
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD",
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å rate limiting"
    ]
    
    for rec in recommendations:
        print(f"  {rec}")
    
    return healthy_services >= 3  # –ú–∏–Ω–∏–º—É–º 3 –∏–∑ 5 —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–¥–æ—Ä–æ–≤—ã

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ UI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    success = test_ui_backend_integration()
    
    # –¢–µ—Å—Ç—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
    if success:
        production_ready = test_production_readiness()
        if production_ready:
            print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        else:
            print("\n‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
    
    if success:
        print("\nüéâ –í—Å–µ UI —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        exit(0)
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        exit(1)

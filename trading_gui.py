# GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Sandbox
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Streamlit –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import json
import time
from datetime import datetime, timedelta
from pathlib import Path
import threading
import queue

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
from train_agents_complete import (
    AdaptiveLearningAgent, 
    create_and_train_agent, 
    test_agent_trading,
    TradingLabelGenerator
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Trading Agent Training System",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üöÄ –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
st.markdown("---")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if 'agents' not in st.session_state:
    st.session_state.agents = {}
if 'training_status' not in st.session_state:
    st.session_state.training_status = {}
if 'sandbox_mode' not in st.session_state:
    st.session_state.sandbox_mode = False
if 'sandbox_data' not in st.session_state:
    st.session_state.sandbox_data = {}

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç—ã
    coin_options = ["BTC", "ETH", "ADA", "DOT", "LINK", "UNI", "SOL", "MATIC"]
    selected_coin = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É:", coin_options)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")
    seq_len = st.slider("–î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:", 20, 100, 50)
    pred_len = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:", 3, 10, 5)
    learning_rate = st.selectbox("Learning Rate:", [0.001, 0.0005, 0.0001], index=0)
    batch_size = st.selectbox("Batch Size:", [16, 32, 64], index=1)
    epochs = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö:", 5, 50, 10)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏")
    profit_threshold = st.slider("–ü–æ—Ä–æ–≥ –ø—Ä–∏–±—ã–ª–∏ (%):", 1.0, 5.0, 2.0, 0.1)
    stop_loss = st.slider("–°—Ç–æ–ø-–ª–æ—Å—Å (%):", 0.5, 3.0, 1.0, 0.1)
    take_profit = st.slider("–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (%):", 2.0, 8.0, 4.0, 0.1)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    st.markdown("---")
    if st.button("üöÄ –û–±—É—á–∏—Ç—å –∞–≥–µ–Ω—Ç–∞", type="primary"):
        st.session_state.train_agent = True
    
    if st.button("üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å Sandbox"):
        st.session_state.sandbox_mode = True
    
    if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
        st.session_state.show_results = True

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
col1, col2 = st.columns([2, 1])

with col1:
    st.header("üìà –û–±—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç–µ
    st.subheader(f"–ú–æ–Ω–µ—Ç–∞: {selected_coin}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –∏–∑ –≤–∞—à–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞)
    if selected_coin not in st.session_state.sandbox_data:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        dates = pd.date_range(start='2024-01-01', end='2024-12-31', freq='5T')
        np.random.seed(42)
        
        # –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã
        base_price = 100 if selected_coin == "BTC" else 50
        prices = base_price + np.cumsum(np.random.randn(len(dates)) * 0.01)
        
        demo_data = pd.DataFrame({
            'datetime': dates,
            'open': prices * (1 + np.random.randn(len(dates)) * 0.002),
            'close': prices,
            'max': prices * (1 + np.abs(np.random.randn(len(dates)) * 0.005)),
            'min': prices * (1 - np.abs(np.random.randn(len(dates)) * 0.005)),
            'volume': np.random.randint(1000, 10000, len(dates))
        })
        
        st.session_state.sandbox_data[selected_coin] = demo_data
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = st.session_state.sandbox_data[selected_coin]
    st.write(f"–î–∞–Ω–Ω—ã–µ: {len(data)} –∑–∞–ø–∏—Å–µ–π —Å {data['datetime'].min()} –ø–æ {data['datetime'].max()}")
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω
    fig = go.Figure()
    fig.add_trace(go.Candlestick(
        x=data['datetime'],
        open=data['open'],
        high=data['max'],
        low=data['min'],
        close=data['close'],
        name='–¶–µ–Ω—ã'
    ))
    fig.update_layout(
        title=f"–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω {selected_coin}",
        xaxis_title="–í—Ä–µ–º—è",
        yaxis_title="–¶–µ–Ω–∞",
        height=400
    )
    st.plotly_chart(fig, use_container_width=True)

with col2:
    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    if selected_coin in st.session_state.agents:
        agent = st.session_state.agents[selected_coin]
        performance = agent.get_performance_summary()
        
        st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", performance.get('total_trades', 0))
        st.metric("–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", performance.get('successful_trades', 0))
        st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞", f"{performance.get('success_rate', 0):.1%}")
        st.metric("–û–±—â–∏–π P&L", f"{performance.get('total_pnl', 0):.4f}")
        st.metric("–°—Ä–µ–¥–Ω–∏–π P&L", f"{performance.get('average_pnl', 0):.4f}")
        
        # –í–µ—Å–∞ –º–æ–¥–µ–ª–µ–π
        st.subheader("‚öñÔ∏è –í–µ—Å–∞ –º–æ–¥–µ–ª–µ–π")
        weights = performance.get('model_weights', [])
        for i, weight in enumerate(weights):
            st.progress(weight)
            st.caption(f"–ú–æ–¥–µ–ª—å {i+1}: {weight:.3f}")
    else:
        st.info("–ê–≥–µ–Ω—Ç –µ—â–µ –Ω–µ –æ–±—É—á–µ–Ω")

# –û–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
if st.session_state.get('train_agent', False):
    st.markdown("---")
    st.header("üéØ –û–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞")
    
    with st.spinner("–û–±—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞..."):
        try:
            # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            agent = create_and_train_agent(selected_coin, data, device='cpu')
            
            if agent:
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                agent.seq_len = seq_len
                agent.pred_len = pred_len
                agent.learning_rate = learning_rate
                agent.batch_size = batch_size
                agent.epochs = epochs
                agent.stop_loss = stop_loss / 100
                agent.take_profit = take_profit / 100
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥–µ–Ω—Ç–∞
                st.session_state.agents[selected_coin] = agent
                st.session_state.training_status[selected_coin] = "completed"
                
                st.success(f"‚úÖ –ê–≥–µ–Ω—Ç {selected_coin} —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª—è—Ö
                st.subheader("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö")
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π", len(agent.ensemble.models))
                    st.metric("–†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", agent.input_size)
                
                with col2:
                    st.metric("–î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", agent.seq_len)
                    st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π", agent.pred_len)
                
                with col3:
                    st.metric("Learning Rate", agent.learning_rate)
                    st.metric("Batch Size", agent.batch_size)
                
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞")
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
    
    st.session_state.train_agent = False

# Sandbox —Ä–µ–∂–∏–º
if st.session_state.sandbox_mode:
    st.markdown("---")
    st.header("üß™ Sandbox - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞")
    
    if selected_coin in st.session_state.agents:
        agent = st.session_state.agents[selected_coin]
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        col1, col2 = st.columns(2)
        with col1:
            test_days = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", 1, 30, 7)
            start_test = st.button("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        with col2:
            if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"):
                st.session_state.sandbox_mode = False
                st.rerun()
        
        if start_test:
            with st.spinner(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ –Ω–∞ {test_days} –¥–Ω—è—Ö..."):
                try:
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
                    test_results = test_agent_trading(agent, test_period_days=test_days)
                    
                    if test_results:
                        st.success(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—ã–ø–æ–ª–Ω–µ–Ω–æ {len(test_results)} —Å–¥–µ–ª–æ–∫")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                        
                        # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                        results_df = pd.DataFrame(test_results)
                        
                        # –ì—Ä–∞—Ñ–∏–∫ P&L
                        if 'profit_loss' in results_df.columns:
                            fig = px.line(
                                results_df, 
                                x='timestamp', 
                                y='profit_loss',
                                title="P&L –ø–æ —Å–¥–µ–ª–∫–∞–º"
                            )
                            st.plotly_chart(fig, use_container_width=True)
                        
                        # –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
                        st.subheader("üìã –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–æ–∫")
                        st.dataframe(results_df)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                        performance = agent.get_performance_summary()
                        
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", performance['total_trades'])
                            st.metric("–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", performance['successful_trades'])
                        
                        with col2:
                            st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞", f"{performance['success_rate']:.1%}")
                            st.metric("–û–±—â–∏–π P&L", f"{performance['total_pnl']:.4f}")
                        
                        with col3:
                            st.metric("–°—Ä–µ–¥–Ω–∏–π P&L", f"{performance['average_pnl']:.4f}")
                            st.metric("–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è", performance['current_position'])
                        
                    else:
                        st.warning("‚ö†Ô∏è –í–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫")
                        
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    else:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã")

# –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if st.session_state.get('show_results', False):
    st.markdown("---")
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    
    if st.session_state.agents:
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        results_data = []
        for coin, agent in st.session_state.agents.items():
            performance = agent.get_performance_summary()
            if 'total_trades' in performance:
                results_data.append({
                    '–ú–æ–Ω–µ—Ç–∞': coin,
                    '–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫': performance['total_trades'],
                    '–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫': performance['successful_trades'],
                    '–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞': f"{performance['success_rate']:.1%}",
                    '–û–±—â–∏–π P&L': f"{performance['total_pnl']:.4f}",
                    '–°—Ä–µ–¥–Ω–∏–π P&L': f"{performance['average_pnl']:.4f}",
                    '–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è': performance['current_position']
                })
        
        if results_data:
            results_df = pd.DataFrame(results_data)
            st.dataframe(results_df, use_container_width=True)
            
            # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            fig = px.bar(
                results_df, 
                x='–ú–æ–Ω–µ—Ç–∞', 
                y='–û–±—â–∏–π P&L',
                title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ P&L –ø–æ –º–æ–Ω–µ—Ç–∞–º",
                color='–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞'
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    else:
        st.info("–ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    
    st.session_state.show_results = False

# –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
st.markdown("---")
col1, col2, col3 = st.columns(3)

with col1:
    st.subheader("üìö –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞")
    st.markdown("""
    - **–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ** –Ω–∞ –æ—à–∏–±–∫–∞—Ö
    - **–ê–Ω—Å–∞–º–±–ª—å –º–æ–¥–µ–ª–µ–π** LSTM
    - **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã** (RSI, MACD, BB)
    - **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏** (—Å—Ç–æ–ø-–ª–æ—Å—Å, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç)
    """)

with col2:
    st.subheader("üîß –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
    st.markdown("""
    1. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
    3. –ù–∞–∂–º–∏—Ç–µ '–û–±—É—á–∏—Ç—å –∞–≥–µ–Ω—Ç–∞'
    4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Sandbox –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """)

with col3:
    st.subheader("‚ö†Ô∏è –í–∞–∂–Ω–æ")
    st.markdown("""
    - –≠—Ç–æ **–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç**
    - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    - –í—Å–µ–≥–¥–∞ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    - –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("üöÄ **Trading Agent Training System** | –°–æ–∑–¥–∞–Ω–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤")
st.markdown("üìß –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –≤ Sandbox —Ä–µ–∂–∏–º–µ
if st.session_state.sandbox_mode:
    time.sleep(30)
    st.rerun()

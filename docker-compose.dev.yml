version: '3.9'
services:
  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - settings/dev.env
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - postgres
      - rabbitmq
    networks:
      - monitor
    command: python run_app_simple.py
    volumes:
      - .:/app
      - /app/__pycache__
    environment:
      - PYTHONPATH=/app/src
      - NODE_ENV=development

  # Celery Worker
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A src.backend.celery_app.create_app.celery_app worker -l INFO
    env_file:
      - settings/dev.env
    depends_on:
      - redis
      - postgres
      - rabbitmq
    networks:
      - monitor
    volumes:
      - .:/app
      - /app/__pycache__
    environment:
      - PYTHONPATH=/app/src
      - NODE_ENV=development

  # Frontend Development Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000
    networks:
      - monitor
    depends_on:
      - backend
    command: npm run dev -- --host 0.0.0.0

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - monitor
    volumes:
      - redis_data:/data

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: agent
      POSTGRES_USER: agent
      POSTGRES_PASSWORD: agent
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - monitor

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: agent
      RABBITMQ_DEFAULT_PASS: agent
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - monitor

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./settings/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitor

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./settings/grafana-dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - monitor

  # Alert Manager
  alertmanager:
    image: prom/alertmanager:latest
    volumes:
      - ./settings/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - --config.file=/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    networks:
      - monitor

  # Node Exporter for System Metrics
  node_exporter:
    image: prom/node-exporter:latest
    pid: host
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - monitor

  # cAdvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitor

networks:
  monitor:
    driver: bridge

volumes:
  pgdata:
  redis_data:
  rabbitmq_data:
  grafana_data:

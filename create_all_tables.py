#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import asyncpg
import sys

async def create_all_tables():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await asyncpg.connect(
            user='agent',
            password='agent',
            database='agent',
            host='localhost',
            port=5432
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É coins
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS coins (
                id SERIAL PRIMARY KEY,
                name VARCHAR(50) UNIQUE NOT NULL,
                price_now FLOAT DEFAULT 0,
                max_price_now FLOAT DEFAULT 0,
                min_price_now FLOAT DEFAULT 0,
                open_price_now FLOAT DEFAULT 0,
                volume_now FLOAT DEFAULT 0,
                price_change_percentage_24h FLOAT,
                news_score_global FLOAT DEFAULT 100,
                parsed BOOLEAN DEFAULT TRUE
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ coins —Å–æ–∑–¥–∞–Ω–∞!")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É timeseries
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS timeseries (
                id SERIAL PRIMARY KEY,
                coin_id INTEGER REFERENCES coins(id),
                timestamp VARCHAR(50),
                path_dataset VARCHAR(100) UNIQUE
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ timeseries —Å–æ–∑–¥–∞–Ω–∞!")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É data_timeseries
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS data_timeseries (
                id SERIAL PRIMARY KEY,
                timeseries_id INTEGER REFERENCES timeseries(id),
                datetime TIMESTAMP NOT NULL,
                open FLOAT,
                max FLOAT,
                min FLOAT,
                close FLOAT,
                volume FLOAT
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ data_timeseries —Å–æ–∑–¥–∞–Ω–∞!")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É portfolio
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS portfolio (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id),
                coin_id INTEGER REFERENCES coins(id),
                amount FLOAT DEFAULT 0.0,
                price_avg FLOAT DEFAULT 0.0,
                CONSTRAINT uq_portfolio_user_coin UNIQUE (user_id, coin_id),
                CONSTRAINT ck_portfolio_amount_non_negative CHECK (amount >= 0)
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ portfolio —Å–æ–∑–¥–∞–Ω–∞!")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É transactions
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS transactions (
                id SERIAL PRIMARY KEY,
                status VARCHAR(30) DEFAULT 'open',
                user_id INTEGER REFERENCES users(id),
                coin_id INTEGER REFERENCES coins(id),
                type VARCHAR(20) NOT NULL,
                amount_orig FLOAT NOT NULL,
                amount FLOAT NOT NULL,
                price FLOAT NOT NULL
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions —Å–æ–∑–¥–∞–Ω–∞!")
        
        await conn.close()
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

async def main():
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü...")
    success = await create_all_tables()
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≥–æ—Ç–æ–≤—ã!")
    else:
        print("\nüí• –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã.")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())

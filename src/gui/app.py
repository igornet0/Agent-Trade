import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path
import sys
import asyncio
import torch

# sys.path
PROJECT_ROOT = Path(__file__).resolve().parents[2]
SRC_ROOT = PROJECT_ROOT / "src"
for p in (str(SRC_ROOT), str(PROJECT_ROOT)):
    if p not in sys.path:
        sys.path.insert(0, p)

# core and models
from core import data_helper
from Dataset import DatasetTimeseries, LoaderTimeLine
from MMM import AgentManager
from train_models.loader import Loader as TrainLoader

from core.database.engine import db_helper, set_db_helper, initialize_db_helper
from core.database.orm.agents import orm_get_agents, orm_set_active_version
from core.database.orm.strategies import orm_list_strategies_for_user
from core.database.orm.ml_models import (
    orm_get_ml_models,
    orm_add_ml_model,
    orm_add_model_stat,
)


st.set_page_config(page_title="Agent Trade ‚Äì Manager", page_icon="üß†", layout="wide")
st.title("üß† Agent Manager ‚Äì –û–±—É—á–µ–Ω–∏–µ, –û—Ü–µ–Ω–∫–∞, –ë–∞–∑–∞ –º–æ–¥–µ–ª–µ–π –∏ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏")
st.markdown("---")


# -------- Helpers --------
@st.cache_data(show_spinner=False)
def list_coins() -> list[str]:
    try:
        return list(data_helper.coin_list)
    except Exception:
        coins = set()
        for p in data_helper.get_path("processed", timetravel="5m"):
            coins.add(p.parent.name)
        return sorted(coins)


@st.cache_data(show_spinner=True)
def load_coin_dataframe(coin: str, timeframe: str = "5m") -> pd.DataFrame:
    frames: list[pd.DataFrame] = []
    for p in data_helper.get_path("processed", coin=coin, timetravel=timeframe):
        try:
            dt = DatasetTimeseries(str(p), timetravel=timeframe)
            df = dt.get_dataset().copy()
            df["datetime"] = pd.to_datetime(df["datetime"], errors="coerce")
            for c in ("open", "close", "max", "min", "volume"):
                df[c] = pd.to_numeric(df[c], errors="coerce")
            frames.append(df)
        except Exception:
            continue
    if not frames:
        return pd.DataFrame(columns=["datetime", "open", "close", "max", "min", "volume"])  # –ø—É—Å—Ç–æ–π
    data = pd.concat(frames, ignore_index=True)
    data = data.dropna(subset=["datetime", "open", "close", "max", "min", "volume"]).sort_values("datetime").drop_duplicates("datetime")
    return data.reset_index(drop=True)


def render_price_chart(df: pd.DataFrame, title: str):
    if df.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    fig = go.Figure()
    fig.add_trace(go.Candlestick(
        x=df["datetime"], open=df["open"], high=df["max"], low=df["min"], close=df["close"], name="OHLC"
    ))
    fig.update_layout(title=title, height=420, xaxis_title="–í—Ä–µ–º—è", yaxis_title="–¶–µ–Ω–∞")
    st.plotly_chart(fig, use_container_width=True)


def build_timeline_loaders(coin_list: list[str], timeframe: str, window: int) -> list[LoaderTimeLine]:
    loaders: list[LoaderTimeLine] = []
    for coin in coin_list:
        df = load_coin_dataframe(coin, timeframe)
        if df.empty:
            continue
        dt = DatasetTimeseries(df, timetravel=timeframe)
        loaders.append(dt.get_time_line_loader(time_line_size=window))
    return loaders


async def ensure_db():
    if not db_helper:
        await set_db_helper()


async def fetch_agents_from_db(agent_type: str | None = None, timeframe: str | None = None):
    # —Å–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π AsyncEngine –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ event loop
    local_db = await initialize_db_helper()
    try:
        async with local_db.get_session() as session:
            agents = await orm_get_agents(session, type_agent=agent_type)
            if agents and timeframe:
                agents = [a for a in agents if a.get("timeframe") == timeframe]
            return agents or []
    finally:
        await local_db.dispose()


async def fetch_strategies(user_id: int = 1):
    local_db = await initialize_db_helper()
    try:
        async with local_db.get_session() as session:
            return await orm_list_strategies_for_user(session, user_id)
    finally:
        await local_db.dispose()


async def fetch_ml_models(type_filter: str | None = None):
    local_db = await initialize_db_helper()
    try:
        async with local_db.get_session() as session:
            return await orm_get_ml_models(session, type=type_filter)
    finally:
        await local_db.dispose()


# -------- Sidebar --------
coins = list_coins()
all_agent_types = list(AgentManager.type_agents.keys())

with st.sidebar:
    st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    agent_type = st.selectbox("–¢–∏–ø –∞–≥–µ–Ω—Ç–∞", options=all_agent_types, index=0)
    timeframe = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º", options=["5m", "15m", "30m", "1H", "4H", "1D"], index=0)
    selected_coins = st.multiselect("–ú–æ–Ω–µ—Ç—ã", options=coins, default=coins[:3])
    window = st.slider("–û–∫–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", 20, 200, 50, 5)

    st.subheader("–û–±—É—á–µ–Ω–∏–µ")
    epochs = st.slider("–≠–ø–æ—Ö–∏", 1, 100, 10)
    batch_size = st.selectbox("Batch size", [16, 32, 64], index=1)
    lr = st.selectbox("Learning rate", [1e-3, 5e-4, 1e-4], index=0)
    weight_decay = st.selectbox("Weight decay", [1e-2, 1e-3, 1e-4], index=1)
    patience = st.slider("Patience", 3, 20, 7)

    st.markdown("---")
    train_btn = st.button("üöÄ –û–±—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞", type="primary")


tab_data, tab_db, tab_train, tab_eval, tab_models, tab_strategy, tab_sandbox = st.tabs(["–î–∞–Ω–Ω—ã–µ", "–ê–≥–µ–Ω—Ç—ã (–ë–î)", "–û–±—É—á–µ–Ω–∏–µ", "–û—Ü–µ–Ω–∫–∞", "–ú–æ–¥–µ–ª–∏ (–ë–î)", "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏", "–ü–µ—Å–æ—á–Ω–∏—Ü–∞"])


with tab_data:
    coin_preview = st.selectbox("–ú–æ–Ω–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞", options=coins, index=0, key="preview_coin")
    df = load_coin_dataframe(coin_preview, timeframe)
    st.caption(f"–ó–∞–ø–∏—Å–µ–π: {len(df)}")
    render_price_chart(df.tail(3000), f"{coin_preview} ‚Äì {timeframe}")
    st.dataframe(df.tail(10), use_container_width=True)


with tab_db:
    st.subheader("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã")
    try:
        agents_list = asyncio.run(fetch_agents_from_db(agent_type=agent_type, timeframe=timeframe))
        if agents_list:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –ø–æ–ª—è –∫ —Å—Ç—Ä–æ–∫–∞–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ Arrow
            df_agents = pd.DataFrame(agents_list)
            if "features" in df_agents.columns:
                df_agents["features"] = df_agents["features"].apply(lambda x: str(x))
            st.dataframe(df_agents, use_container_width=True)
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
            col_a, col_b = st.columns([2, 1])
            with col_a:
                sel = st.selectbox("–í—ã–±—Ä–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", options=[f"{a['id']} | {a['name']} v{a['version']}" for a in agents_list])
            with col_b:
                if st.button("–°–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º"):
                    agent_id = int(sel.split(" |")[0])
                    try:
                        asyncio.run(_ := (lambda aid=agent_id: (asyncio.run(ensure_db()), None))())
                    except RuntimeError:
                        pass
                    async def _activate(aid: int):
                        await ensure_db()
                        async with db_helper.get_session() as session:
                            await orm_set_active_version(session, aid)
                    try:
                        asyncio.run(_activate(agent_id))
                        st.success("–í–µ—Ä—Å–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
        else:
            st.info("–í –ë–î –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    except Exception as e:
        st.warning(f"–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")


with tab_train:
    st.subheader("–û–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AgentManager")
    if not selected_coins:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É —Å–ª–µ–≤–∞")
    else:
        if train_btn:
            with st.spinner("–ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –∏ –∞–≥–µ–Ω—Ç..."):
                try:
                    # –ö–æ–Ω—Ñ–∏–≥ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ –º–æ–¥–µ–ª–µ–π –≤ data_helper –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∑–¥–µ—Å—å –±–µ—Ä—ë–º –¥–µ—Ñ–æ–ª—Ç
                    config = {
                        "agents": [
                            {
                                "type": agent_type,
                                "name": f"{agent_type}_{timeframe}",
                                "indecaters": {},
                                "timetravel": timeframe,
                                "model_parameters": {"seq_len": window, "pred_len": 5},
                                "data_normalize": True,
                                "mod": "train",
                            }
                        ]
                    }

                    am = AgentManager(config=config, count_agents=1)
                    agent = am.get_agents()

                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –º–æ–¥–µ–ª—å
                    try:
                        pth_path = str(agent.get_filename_pth())
                    except Exception:
                        pth_path = None

                    loaders = build_timeline_loaders(selected_coins, timeframe, window)
                    if not loaders:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ data/processed")
                    else:
                        trainer = TrainLoader(agent_type=agent_type, model_type="MMM")
                        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
                        # (Loader —á–∏—Ç–∞–µ—Ç –∏–∑ data_helper –∫–æ–Ω—Ñ–∏–≥ –ø–æ –∏–º–µ–Ω–∏, –ø–æ—ç—Ç–æ–º—É –æ–±—É—á–∏–º –Ω–∞–ø—Ä—è–º—É—é _train_single_agent)
                        history = trainer._train_single_agent(
                            agent=agent,
                            loaders=loaders,
                            epochs=epochs,
                            batch_size=batch_size,
                            base_lr=lr,
                            weight_decay=weight_decay,
                            patience=patience,
                            mixed=True,
                            mixed_precision=False,
                        )
                        st.success("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                        st.line_chart(pd.Series(history, name="loss"))

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ –º–æ–¥–µ–ª–∏ –≤ –ë–î
                        if pth_path:
                            try:
                                async def _save_model_record():
                                    local_db = await initialize_db_helper()
                                    try:
                                        async with local_db.get_session() as session:
                                            await orm_add_ml_model(session, type=agent_type, path_model=pth_path, version=str(getattr(agent, 'version', '0.0.1')))
                                    finally:
                                        await local_db.dispose()
                                asyncio.run(_save_model_record())
                                st.toast("–ú–æ–¥–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ë–î", icon="‚úÖ")
                            except Exception as e:
                                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –º–æ–¥–µ–ª—å –≤ –ë–î: {e}")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
with tab_eval:
    st.subheader("–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π/–∞–≥–µ–Ω—Ç–æ–≤")
    col1, col2 = st.columns(2)
    with col1:
        eval_agent_type = st.selectbox("–¢–∏–ø –¥–ª—è –æ—Ü–µ–Ω–∫–∏", options=all_agent_types, index=0, key="eval_agent_type")
        eval_timeframe = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º", options=["5m", "15m", "30m", "1H", "4H", "1D"], index=0, key="eval_timeframe")
        eval_coins = st.multiselect("–ú–æ–Ω–µ—Ç—ã", options=coins, default=coins[:2], key="eval_coins")
        eval_window = st.slider("–û–∫–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", 20, 200, 50, 5, key="eval_window")
    with col2:
        st.caption("–ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö")
        run_eval = st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É")

    if run_eval:
        try:
            loaders = build_timeline_loaders(eval_coins, eval_timeframe, eval_window)
            if not loaders:
                st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏")
            else:
                config = {
                    "agents": [
                        {
                            "type": eval_agent_type,
                            "name": f"{eval_agent_type}_{eval_timeframe}",
                            "indecaters": {},
                            "timetravel": eval_timeframe,
                            "model_parameters": {"seq_len": eval_window, "pred_len": 5},
                            "data_normalize": True,
                            "mod": "test",
                        }
                    ]
                }
                am = AgentManager(config=config, count_agents=1)
                agent = am.get_agents()
                ds = TrainLoader(agent_type=eval_agent_type, model_type="MMM").load_agent_data(loaders, agent, batch_size=32, mixed=False)
                import torch
                from torch import no_grad
                losses = []
                n_batches = 0
                for (x, y, t) in ds:
                    with no_grad():
                        out = agent.trade([x, t] if t is not None else [x])
                        try:
                            loss = agent.loss_function(out, y)
                            losses.append(float(loss.detach().cpu().item()))
                        except Exception:
                            pass
                        n_batches += 1
                        if n_batches >= 20:
                            break
                if losses:
                    st.success(f"–°—Ä–µ–¥–Ω–∏–π loss (–ø–µ—Ä–≤—ã–µ {len(losses)} –±–∞—Ç—á–µ–π): {sum(losses)/len(losses):.4f}")
                    st.line_chart(pd.Series(losses, name="loss_batch"))
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –ë–î
                    with st.expander("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ –ë–î"):
                        try:
                            models_for_type = asyncio.run(fetch_ml_models(type_filter=eval_agent_type))
                        except Exception:
                            models_for_type = []
                        if models_for_type:
                            selection = st.selectbox(
                                "–ó–∞–ø–∏—Å–∞—Ç—å –≤ –º–æ–¥–µ–ª—å",
                                options=[f"#{m.id} {m.type} | {m.version} | {m.path_model}" for m in models_for_type],
                            )
                            save_metrics = st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ test")
                            if save_metrics:
                                try:
                                    model_id = int(selection.split()[0].replace('#', ''))
                                    async def _save_stats(mid: int, loss_avg: float):
                                        local_db = await initialize_db_helper()
                                        try:
                                            async with local_db.get_session() as session:
                                                await orm_add_model_stat(
                                                    session,
                                                    model_id=mid,
                                                    type="test",
                                                    loss=loss_avg,
                                                    accuracy=0.0,
                                                    precision=0.0,
                                                    recall=0.0,
                                                    f1=0.0,
                                                )
                                        finally:
                                            await local_db.dispose()
                                    asyncio.run(_save_stats(model_id, sum(losses)/len(losses)))
                                    st.success("–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                                except Exception as e:
                                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏: {e}")
                        else:
                            st.info("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –æ –º–æ–¥–µ–ª–∏.")
                else:
                    st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {e}")

with tab_models:
    st.subheader("ML –ú–æ–¥–µ–ª–∏ (–ë–î)")
    try:
        models = asyncio.run(fetch_ml_models())
        if models:
            import pandas as _pd
            df_models = _pd.DataFrame([
                {"id": m.id, "type": m.type, "version": m.version, "path": m.path_model} for m in models
            ])
            st.dataframe(df_models, use_container_width=True)
        else:
            st.info("–í –ë–î –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    except Exception as e:
        st.warning(f"–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

with tab_sandbox:
    st.subheader("–ü–µ—Å–æ—á–Ω–∏—Ü–∞ (–±—ç–∫—Ç–µ—Å—Ç)")
    st.caption("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫: –∑–∞–≥—Ä—É–∑–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î –∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤/–ë–î")
    sb_coin = st.text_input("–ú–æ–Ω–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö)", value="")
    sb_tf = st.text_input("–¢–∞–π–º—Ñ—Ä–µ–π–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π)", value="")
    sb_steps = st.slider("–®–∞–≥–æ–≤", 10, 500, 100, 10)
    run_sb = st.button("üèÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å (–¥–µ–º–æ)")
    if run_sb:
        try:
            from SandboxApp.sandbox import Sandbox
            sb = Sandbox(db_use=True)
            res = sb.start(coin=sb_coin or None, timeframe=sb_tf or None, max_steps=sb_steps)
            st.write(res)
        except Exception as e:
            st.warning(f"–ü–µ—Å–æ—á–Ω–∏—Ü–∞ –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞: {e}")


with tab_strategy:
    st.subheader("–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–∏–∑ –ë–î)")
    try:
        strategies = asyncio.run(fetch_strategies(user_id=1))
        if strategies:
            df_str = pd.DataFrame([{"id": s.id, "name": s.name, "type": s.type, "risk": s.risk, "reward": s.reward} for s in strategies])
            st.dataframe(df_str, use_container_width=True)
        else:
            st.info("–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #1 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    except Exception as e:
        st.warning(f"–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

st.markdown("---")
st.caption("GUI —á–µ—Ä–µ–∑ AgentManager. –î–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ ORM-—Ñ—É–Ω–∫—Ü–∏–∏.")



#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
"""

import sys
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_system.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –û–ë–£–ß–ï–ù–ò–Ø –¢–û–†–ì–û–í–´–• –ê–ì–ï–ù–¢–û–í")
    print("="*60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
        from crypto_trading_agent import train_crypto_trading_agent, test_agent_trading
        from multi_agent_ensemble import create_and_train_ensemble, run_real_time_trading
        
        import torch
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
        
        # –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        coins_to_trade = ["BTC", "ETH", "ADA", "DOT", "LINK"]
        print(f"\n–°–æ–∑–¥–∞–µ–º –∞–Ω—Å–∞–º–±–ª—å –¥–ª—è {len(coins_to_trade)} –º–æ–Ω–µ—Ç: {', '.join(coins_to_trade)}")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –∞–Ω—Å–∞–º–±–ª—å
        print("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤...")
        ensemble = create_and_train_ensemble(coins_to_trade, device)
        
        if ensemble:
            print("‚úÖ –ê–Ω—Å–∞–º–±–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–±—É—á–µ–Ω!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤
            print("\nüìä –í–µ—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤ –≤ –∞–Ω—Å–∞–º–±–ª–µ:")
            for coin, weight in ensemble.agent_weights.items():
                print(f"  {coin}: {weight:.3f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é
            portfolio = ensemble.get_portfolio_summary()
            print("\nüí∞ –°–≤–æ–¥–∫–∞ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é:")
            print(f"  –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${portfolio['total_value']:.2f}")
            print(f"  –ù–∞–ª–∏—á–Ω—ã–µ: ${portfolio['cash']:.2f}")
            print(f"  –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: ${portfolio['realized_pnl']:.2f}")
            print(f"  –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {portfolio['total_return']:.2f}%")
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–ø—É—Å–∫–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
            print("\n" + "="*60)
            print("üéØ –í–´–ë–ï–†–ò–¢–ï –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´:")
            print("1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)")
            print("2. –¢–æ—Ä–≥–æ–≤–ª—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            print("3. –í—ã—Ö–æ–¥")
            
            while True:
                try:
                    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
                    
                    if choice == "1":
                        print("\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º...")
                        run_demo_mode(ensemble)
                        break
                        
                    elif choice == "2":
                        print("\nüö® –í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏!")
                        print("–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –ø–æ—Ç–µ—Ä—è–º!")
                        confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
                        
                        if confirm in ['–¥–∞', 'yes', 'y', '–¥']:
                            print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
                            run_real_time_trading(ensemble)
                        else:
                            print("–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω.")
                            break
                            
                    elif choice == "3":
                        print("–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
                        break
                        
                    else:
                        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")
                        
                except KeyboardInterrupt:
                    print("\n\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –í—ã—Ö–æ–¥...")
                    break
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞: {e}")
                    continue
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω—Å–∞–º–±–ª—å")
            return 1
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        return 1
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return 1
    
    print("\nüèÅ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    return 0

def run_demo_mode(ensemble):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"""
    print("\nüìä –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ô –†–ï–ñ–ò–ú")
    print("="*40)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        for coin_name, agent in ensemble.agents.items():
            print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ {coin_name}...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 3 –¥–Ω—è—Ö –¥–∞–Ω–Ω—ã—Ö
            test_results = test_agent_trading(agent, test_period_days=3)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            performance = agent.get_performance_summary()
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {coin_name}:")
            print(f"    –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {performance['total_trades']}")
            print(f"    –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {performance['success_rate']:.2%}")
            print(f"    –û–±—â–∏–π P&L: ${performance['total_pnl']:.4f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É
        print("\nüìä –û–ë–©–ê–Ø –°–í–û–î–ö–ê:")
        portfolio = ensemble.get_portfolio_summary()
        print(f"  –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${portfolio['total_value']:.2f}")
        print(f"  –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {portfolio['total_return']:.2f}%")
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤–µ—Å–æ–≤
        print("\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –≤–µ—Å–æ–≤...")
        ensemble.adaptive_weight_adjustment()
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}", exc_info=True)

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –í—ã—Ö–æ–¥...")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)

"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è ML —Å–µ—Ä–≤–∏—Å–æ–≤
"""
import sys
import os
import json
import tempfile
import shutil
from datetime import datetime, timedelta

def test_news_background_service_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ News Background Service"""
    print("üß™ Testing News Background Service integration...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        service_file = 'src/core/services/news_background_service.py'
        if not os.path.exists(service_file):
            print(f"‚ùå Service file missing: {service_file}")
            return False
        
        print(f"‚úÖ Service file exists: {service_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ä–≤–∏—Å–∞
        with open(service_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_methods = [
            'class NewsBackgroundService',
            'def process_news(',
            'def calculate_background(',
            'def get_background(',
            'def update_background('
        ]
        
        for method in required_methods:
            if method in content:
                print(f"‚úÖ Found method: {method}")
            else:
                print(f"‚ùå Missing method: {method}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        required_imports = [
            'from ..database.orm.news import',
            'from ..database.orm.market import',
            'import redis'
        ]
        
        for imp in required_imports:
            if imp in content:
                print(f"‚úÖ Found import: {imp}")
            else:
                print(f"‚ùå Missing import: {imp}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing News Background Service: {e}")
        return False


def test_pred_time_service_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Pred Time Service"""
    print("üß™ Testing Pred Time Service integration...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        service_file = 'src/core/services/pred_time_service.py'
        if not os.path.exists(service_file):
            print(f"‚ùå Service file missing: {service_file}")
            return False
        
        print(f"‚úÖ Service file exists: {service_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ä–≤–∏—Å–∞
        with open(service_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_methods = [
            'class PredTimeService',
            'def train_model(',
            'def predict(',
            'def evaluate_model(',
            'def save_model(',
            'def load_model('
        ]
        
        for method in required_methods:
            if method in content:
                print(f"‚úÖ Found method: {method}")
            else:
                print(f"‚ùå Missing method: {method}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã ML –±–∏–±–ª–∏–æ—Ç–µ–∫
        ml_imports = [
            'import torch',
            'import numpy as np',
            'import pandas as pd',
            'from sklearn.preprocessing import'
        ]
        
        found_ml_imports = 0
        for imp in ml_imports:
            if imp in content:
                print(f"‚úÖ Found ML import: {imp}")
                found_ml_imports += 1
        
        if found_ml_imports >= 2:
            print("‚úÖ ML libraries properly imported")
        else:
            print("‚ö†Ô∏è  Limited ML library imports found")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing Pred Time Service: {e}")
        return False


def test_trade_time_service_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Trade Time Service"""
    print("üß™ Testing Trade Time Service integration...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        service_file = 'src/core/services/trade_time_service.py'
        if not os.path.exists(service_file):
            print(f"‚ùå Service file missing: {service_file}")
            return False
        
        print(f"‚úÖ Service file exists: {service_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ä–≤–∏—Å–∞
        with open(service_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_methods = [
            'class TradeTimeService',
            'def train_model(',
            'def predict(',
            'def evaluate_model(',
            'def save_model(',
            'def load_model('
        ]
        
        for method in required_methods:
            if method in content:
                print(f"‚úÖ Found method: {method}")
            else:
                print(f"‚ùå Missing method: {method}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
        classifier_imports = [
            'import lightgbm',
            'import catboost',
            'from sklearn.ensemble import'
        ]
        
        found_classifier_imports = 0
        for imp in classifier_imports:
            if imp in content:
                print(f"‚úÖ Found classifier import: {imp}")
                found_classifier_imports += 1
        
        if found_classifier_imports >= 1:
            print("‚úÖ Classifier libraries properly imported")
        else:
            print("‚ö†Ô∏è  Limited classifier library imports found")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing Trade Time Service: {e}")
        return False


def test_risk_service_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Risk Service"""
    print("üß™ Testing Risk Service integration...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        service_file = 'src/core/services/risk_service.py'
        if not os.path.exists(service_file):
            print(f"‚ùå Service file missing: {service_file}")
            return False
        
        print(f"‚úÖ Service file exists: {service_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ä–≤–∏—Å–∞
        with open(service_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_methods = [
            'class RiskService',
            'def calculate_risk(',
            'def assess_position_size(',
            'def evaluate_portfolio_risk(',
            'def get_risk_metrics('
        ]
        
        for method in required_methods:
            if method in content:
                print(f"‚úÖ Found method: {method}")
            else:
                print(f"‚ùå Missing method: {method}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫
        risk_imports = [
            'import numpy as np',
            'import pandas as pd',
            'from ..utils.metrics import'
        ]
        
        for imp in risk_imports:
            if imp in content:
                print(f"‚úÖ Found risk import: {imp}")
            else:
                print(f"‚ùå Missing risk import: {imp}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing Risk Service: {e}")
        return False


def test_trade_aggregator_service_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Trade Aggregator Service"""
    print("üß™ Testing Trade Aggregator Service integration...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        service_file = 'src/core/services/trade_aggregator_service.py'
        if not os.path.exists(service_file):
            print(f"‚ùå Service file missing: {service_file}")
            return False
        
        print(f"‚úÖ Service file exists: {service_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ä–≤–∏—Å–∞
        with open(service_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_methods = [
            'class TradeAggregatorService',
            'def aggregate_signals(',
            'def calculate_portfolio_metrics(',
            'def apply_risk_management(',
            'def make_final_decision('
        ]
        
        for method in required_methods:
            if method in content:
                print(f"‚úÖ Found method: {method}")
            else:
                print(f"‚ùå Missing method: {method}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing Trade Aggregator Service: {e}")
        return False


def test_pipeline_orchestrator_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Pipeline Orchestrator"""
    print("üß™ Testing Pipeline Orchestrator integration...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        service_file = 'src/core/services/pipeline_orchestrator.py'
        if not os.path.exists(service_file):
            print(f"‚ùå Service file missing: {service_file}")
            return False
        
        print(f"‚úÖ Service file exists: {service_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ä–≤–∏—Å–∞
        with open(service_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_methods = [
            'class PipelineOrchestrator',
            'def execute_pipeline(',
            'def _load_market_data(',
            'def _process_news_background(',
            'def _run_pred_time_models(',
            'def _run_trade_time_models(',
            'def _run_risk_models(',
            'def _run_trade_aggregator(',
            'def _calculate_final_metrics('
        ]
        
        for method in required_methods:
            if method in content:
                print(f"‚úÖ Found method: {method}")
            else:
                print(f"‚ùå Missing method: {method}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        service_imports = [
            'from .news_background_service import NewsBackgroundService',
            'from .pred_time_service import PredTimeService',
            'from .trade_time_service import TradeTimeService',
            'from .risk_service import RiskService',
            'from .trade_aggregator_service import TradeAggregatorService'
        ]
        
        for imp in service_imports:
            if imp in content:
                print(f"‚úÖ Found service import: {imp}")
            else:
                print(f"‚ùå Missing service import: {imp}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing Pipeline Orchestrator: {e}")
        return False


def test_model_versioning_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Model Versioning Service"""
    print("üß™ Testing Model Versioning Service integration...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        service_file = 'src/core/services/model_versioning_service.py'
        if not os.path.exists(service_file):
            print(f"‚ùå Service file missing: {service_file}")
            return False
        
        print(f"‚úÖ Service file exists: {service_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ä–≤–∏—Å–∞
        with open(service_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_methods = [
            'class ModelVersioningService',
            'def create_version(',
            'def promote_version(',
            'def rollback_version(',
            'def list_versions(',
            'def get_version_info(',
            'def delete_version(',
            'def get_production_status(',
            'def cleanup_old_versions('
        ]
        
        for method in required_methods:
            if method in content:
                print(f"‚úÖ Found method: {method}")
            else:
                print(f"‚ùå Missing method: {method}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã ORM
        orm_imports = [
            'from ..database.orm.artifacts import',
            'from ..database.orm.agents import',
            'from ..database.engine import get_db'
        ]
        
        for imp in orm_imports:
            if imp in content:
                print(f"‚úÖ Found ORM import: {imp}")
            else:
                print(f"‚ùå Missing ORM import: {imp}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing Model Versioning Service: {e}")
        return False


def test_celery_tasks_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Celery –∑–∞–¥–∞—á"""
    print("üß™ Testing Celery tasks integration...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–¥–∞—á
        tasks_file = 'src/backend/celery_app/tasks.py'
        if not os.path.exists(tasks_file):
            print(f"‚ùå Tasks file missing: {tasks_file}")
            return False
        
        print(f"‚úÖ Tasks file exists: {tasks_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–¥–∞—á
        with open(tasks_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_tasks = [
            'def train_news_task(',
            'def train_pred_time_task(',
            'def train_trade_time_task(',
            'def train_risk_task(',
            'def train_trade_aggregator_task(',
            'def run_pipeline_backtest_task('
        ]
        
        for task in required_tasks:
            if task in content:
                print(f"‚úÖ Found task: {task}")
            else:
                print(f"‚ùå Missing task: {task}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –∑–∞–¥–∞—á–∞—Ö
        service_imports = [
            'from core.services.news_background_service import NewsBackgroundService',
            'from core.services.pred_time_service import PredTimeService',
            'from core.services.trade_time_service import TradeTimeService',
            'from core.services.risk_service import RiskService',
            'from core.services.trade_aggregator_service import TradeAggregatorService',
            'from core.services.pipeline_orchestrator import PipelineOrchestrator'
        ]
        
        found_service_imports = 0
        for imp in service_imports:
            if imp in content:
                print(f"‚úÖ Found service import in tasks: {imp}")
                found_service_imports += 1
        
        if found_service_imports >= 3:
            print("‚úÖ Service imports properly integrated in tasks")
        else:
            print("‚ö†Ô∏è  Limited service imports found in tasks")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing Celery tasks: {e}")
        return False


def test_api_endpoints_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("üß™ Testing API endpoints integration...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
        router_file = 'src/backend/app/routers/apidb_agent/router.py'
        if not os.path.exists(router_file):
            print(f"‚ùå Router file missing: {router_file}")
            return False
        
        print(f"‚úÖ Router file exists: {router_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        with open(router_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # ML —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        ml_endpoints = [
            '@router.post("/news/train")',
            '@router.post("/pred_time/train")',
            '@router.post("/trade_time/train")',
            '@router.post("/risk/train")',
            '@router.post("/trade_aggregator/train")'
        ]
        
        for endpoint in ml_endpoints:
            if endpoint in content:
                print(f"‚úÖ Found ML endpoint: {endpoint}")
            else:
                print(f"‚ùå Missing ML endpoint: {endpoint}")
                return False
        
        # Pipeline —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        pipeline_endpoints = [
            '@router.post("/pipeline/run")',
            '@router.get("/pipeline/tasks/{task_id}")',
            '@router.get("/pipeline/backtests")'
        ]
        
        for endpoint in pipeline_endpoints:
            if endpoint in content:
                print(f"‚úÖ Found pipeline endpoint: {endpoint}")
            else:
                print(f"‚ùå Missing pipeline endpoint: {endpoint}")
                return False
        
        # Versioning —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        versioning_endpoints = [
            '@router.post("/models/{agent_id}/versions")',
            '@router.post("/models/{agent_id}/versions/{version}/promote")',
            '@router.get("/models/{agent_id}/versions")'
        ]
        
        for endpoint in versioning_endpoints:
            if endpoint in content:
                print(f"‚úÖ Found versioning endpoint: {endpoint}")
            else:
                print(f"‚ùå Missing versioning endpoint: {endpoint}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing API endpoints: {e}")
        return False


def test_database_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ Testing database integration...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
        models_files = [
            'src/core/database/models/ML_models.py',
            'src/core/database/models/main_models.py'
        ]
        
        for model_file in models_files:
            if not os.path.exists(model_file):
                print(f"‚ùå Model file missing: {model_file}")
                return False
            print(f"‚úÖ Model file exists: {model_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ORM –º–µ—Ç–æ–¥—ã
        orm_files = [
            'src/core/database/orm/agents.py',
            'src/core/database/orm/artifacts.py',
            'src/core/database/orm/pipelines.py',
            'src/core/database/orm/market.py',
            'src/core/database/orm/news.py'
        ]
        
        for orm_file in orm_files:
            if not os.path.exists(orm_file):
                print(f"‚ùå ORM file missing: {orm_file}")
                return False
            print(f"‚úÖ ORM file exists: {orm_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        migrations_dir = 'src/core/alembic/versions'
        if os.path.exists(migrations_dir):
            migration_files = os.listdir(migrations_dir)
            if len(migration_files) >= 5:
                print(f"‚úÖ Found {len(migration_files)} migration files")
            else:
                print(f"‚ö†Ô∏è  Limited migration files found: {len(migration_files)}")
        else:
            print("‚ö†Ô∏è  Migrations directory not found")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing database integration: {e}")
        return False


def test_frontend_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üß™ Testing frontend integration...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
        service_files = [
            'frontend/src/services/mlService.js',
            'frontend/src/services/pipelineService.js',
            'frontend/src/services/versioningService.js'
        ]
        
        for service_file in service_files:
            if not os.path.exists(service_file):
                print(f"‚ùå Service file missing: {service_file}")
                return False
            print(f"‚úÖ Service file exists: {service_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        component_files = [
            'frontend/src/components/profile/TrainAgentModal.jsx',
            'frontend/src/components/profile/ModuleTester.jsx',
            'frontend/src/components/profile/ModelVersioningPanel.jsx'
        ]
        
        for component_file in component_files:
            if not os.path.exists(component_file):
                print(f"‚ùå Component file missing: {component_file}")
                return False
            print(f"‚úÖ Component file exists: {component_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        train_modal_file = 'frontend/src/components/profile/TrainAgentModal.jsx'
        if os.path.exists(train_modal_file):
            with open(train_modal_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            if 'import mlService' in content:
                print("‚úÖ ML service integrated in TrainAgentModal")
            else:
                print("‚ùå ML service not integrated in TrainAgentModal")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing frontend integration: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ Starting ML Services Integration Tests...")
    
    tests = [
        test_news_background_service_integration,
        test_pred_time_service_integration,
        test_trade_time_service_integration,
        test_risk_service_integration,
        test_trade_aggregator_service_integration,
        test_pipeline_orchestrator_integration,
        test_model_versioning_integration,
        test_celery_tasks_integration,
        test_api_endpoints_integration,
        test_database_integration,
        test_frontend_integration
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
                print(f"‚úÖ {test.__name__} passed\n")
            else:
                print(f"‚ùå {test.__name__} failed\n")
        except Exception as e:
            print(f"‚ùå {test.__name__} failed with error: {e}\n")
    
    print(f"üìä Integration Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All integration tests passed!")
        return True
    else:
        print("‚ö†Ô∏è  Some integration tests failed!")
        return False


if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)

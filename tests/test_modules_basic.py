#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥—É–ª–µ–π –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sys
import os
import ast

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

def test_file_syntax(file_path):
    """–¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–∞—Ä—Å–∏–º AST –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        ast.parse(content)
        return True
    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {file_path}: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return False

def test_file_structure(file_path, required_methods):
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤
        for method in required_methods:
            if method in content:
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –Ω–∞–π–¥–µ–Ω –≤ {os.path.basename(file_path)}")
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {os.path.basename(file_path)}")
                return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã {file_path}: {e}")
        return False

def test_trade_time_service_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã TradeTimeService"""
    file_path = "src/core/services/trade_time_service.py"
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    if not test_file_syntax(file_path):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    required_methods = [
        'class TradeTimeService',
        'def _calculate_technical_indicators',
        'def _prepare_features',
        'def _create_model',
        'def train_model',
        'def _calculate_metrics',
        'def _save_model',
        'def load_model',
        'def predict'
    ]
    
    return test_file_structure(file_path, required_methods)

def test_risk_service_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã RiskService"""
    file_path = "src/core/services/risk_service.py"
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    if not test_file_syntax(file_path):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    required_methods = [
        'class RiskService',
        'def _calculate_technical_indicators',
        'def _calculate_heuristic_risk_score',
        'def _calculate_heuristic_volume_score',
        'def _prepare_features',
        'def _create_model',
        'def train_model',
        'def _calculate_risk_metrics',
        'def _calculate_volume_metrics',
        'def _save_models',
        'def load_models',
        'def predict',
        'def calculate_var',
        'def calculate_expected_shortfall'
    ]
    
    return test_file_structure(file_path, required_methods)

def test_celery_tasks_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Celery –∑–∞–¥–∞—á"""
    file_path = "src/backend/celery_app/tasks.py"
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    if not test_file_syntax(file_path):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    required_methods = [
        'def train_trade_time_task',
        'def evaluate_trade_time_task',
        'def train_risk_task',
        'def evaluate_risk_task'
    ]
    
    return test_file_structure(file_path, required_methods)

def test_api_endpoints_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API endpoints"""
    file_path = "src/backend/app/routers/apidb_agent/router.py"
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    if not test_file_syntax(file_path):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    required_methods = [
        'def train_trade_time',
        'def evaluate_trade_time',
        'def get_trade_time_models',
        'def predict_trade_time',
        'def train_risk',
        'def evaluate_risk',
        'def get_risk_models',
        'def predict_risk'
    ]
    
    return test_file_structure(file_path, required_methods)

def test_schemas_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ö–µ–º"""
    file_path = "src/backend/app/schemas/agent.py"
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    if not test_file_syntax(file_path):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    required_classes = [
        'class TradeTimeTrainConfig',
        'class RiskTrainConfig',
        'class TradeTimeModel',
        'class RiskModel',
        'class TradeTimePrediction',
        'class RiskPrediction'
    ]
    
    return test_file_structure(file_path, required_classes)

def test_frontend_components():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    components = [
        ("frontend/src/components/profile/TradeTimeTrainPanel.jsx", [
            'const TradeTimeTrainPanel',
            'useState',
            'handleChange',
            'model_type',
            'n_estimators'
        ]),
        ("frontend/src/components/profile/RiskTrainPanel.jsx", [
            'const RiskTrainPanel',
            'useState',
            'handleChange',
            'risk_weight',
            'volume_weight'
        ])
    ]
    
    results = []
    for file_path, required_elements in components:
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            results.append(False)
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSX —Ñ–∞–π–ª–∞
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            for element in required_elements:
                if element in content:
                    print(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç {element} –Ω–∞–π–¥–µ–Ω –≤ {os.path.basename(file_path)}")
                else:
                    print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç {element} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {os.path.basename(file_path)}")
                    results.append(False)
                    break
            else:
                results.append(True)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {file_path}: {e}")
            results.append(False)
    
    return all(results)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –º–æ–¥—É–ª–µ–π")
    print("=" * 50)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ TradeTimeService", test_trade_time_service_structure),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ RiskService", test_risk_service_structure),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ Celery –∑–∞–¥–∞—á", test_celery_tasks_structure),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ API endpoints", test_api_endpoints_structure),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ö–µ–º", test_schemas_structure),
        ("–§—Ä–æ–Ω—Ç–µ–Ω–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", test_frontend_components),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç –¢–µ—Å—Ç: {test_name}")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå {test_name} –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå {test_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        return 1

if __name__ == '__main__':
    sys.exit(main())

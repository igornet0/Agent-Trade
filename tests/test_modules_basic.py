#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
"""

import sys
import os
import ast

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

def test_file_syntax(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        ast.parse(content)
        return True
    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {file_path}: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return False

def test_file_structure(file_path, required_elements):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        missing_elements = []
        for element in required_elements:
            if element not in content:
                missing_elements.append(element)
        
        if missing_elements:
            print(f"‚ùå –í {file_path} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_elements}")
            return False
        else:
            print(f"‚úÖ {file_path} —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {file_path}: {e}")
        return False

def test_trade_aggregator_service():
    """–¢–µ—Å—Ç Trade Aggregator —Å–µ—Ä–≤–∏—Å–∞"""
    file_path = "src/core/services/trade_aggregator_service.py"
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    if not test_file_syntax(file_path):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    required_elements = [
        "class TradeAggregatorService",
        "def train_model",
        "def evaluate_model",
        "def predict",
        "_calculate_portfolio_metrics",
        "_aggregate_signals",
        "_apply_risk_management",
        "_create_ml_model",
        "_calculate_max_drawdown",
        "_save_model",
        "load_model"
    ]
    
    return test_file_structure(file_path, required_elements)

def test_celery_tasks():
    """–¢–µ—Å—Ç Celery –∑–∞–¥–∞—á"""
    file_path = "src/backend/celery_app/tasks.py"
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    if not test_file_syntax(file_path):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    required_elements = [
        "def train_trade_aggregator_task",
        "def evaluate_trade_aggregator_task",
        "TradeAggregatorService"
    ]
    
    return test_file_structure(file_path, required_elements)

def test_api_endpoints():
    """–¢–µ—Å—Ç API endpoints"""
    file_path = "src/backend/app/routers/apidb_agent/router.py"
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    if not test_file_syntax(file_path):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    required_elements = [
        "def train_trade_aggregator",
        "def evaluate_trade_aggregator",
        "def get_trade_aggregator_models",
        "def predict_trade_aggregator",
        "TradeAggregatorService"
    ]
    
    return test_file_structure(file_path, required_elements)

def test_schemas():
    """–¢–µ—Å—Ç Pydantic —Å—Ö–µ–º"""
    file_path = "src/backend/app/schemas/agent.py"
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    if not test_file_syntax(file_path):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    required_elements = [
        "class TradeAggregatorTrainConfig",
        "class TradeAggregatorModel",
        "class TradeAggregatorPrediction",
        "TRADE_AGGREGATOR = \"Trade_aggregator\""
    ]
    
    return test_file_structure(file_path, required_elements)

def test_frontend_components():
    """–¢–µ—Å—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    components = [
        ("frontend/src/components/profile/TradeAggregatorTrainPanel.jsx", [
            "TradeAggregatorTrainPanel",
            "useState",
            "useEffect",
            "mode",
            "weights",
            "thresholds",
            "risk_limits",
            "portfolio"
        ]),
        ("frontend/src/components/profile/TrainAgentModal.jsx", [
            "TradeAggregatorTrainPanel",
            "tradeAggregatorConfig",
            "isAgentTradeAggregator"
        ]),
        ("frontend/src/services/mlService.js", [
            "tradeAggregator: {",
            "train:",
            "evaluate:",
            "getModels:",
            "predict:"
        ])
    ]
    
    results = []
    for file_path, required_elements in components:
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            results.append(False)
            continue
        
        # –î–ª—è JS/JSX —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if file_path.endswith(('.js', '.jsx')):
            result = test_file_structure(file_path, required_elements)
        else:
            # –î–ª—è Python —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if not test_file_syntax(file_path):
                result = False
            else:
                result = test_file_structure(file_path, required_elements)
        
        results.append(result)
    
    return all(results)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π...")
    
    tests = [
        ("Trade Aggregator Service", test_trade_aggregator_service),
        ("Celery Tasks", test_celery_tasks),
        ("API Endpoints", test_api_endpoints),
        ("Pydantic Schemas", test_schemas),
        ("Frontend Components", test_frontend_components)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {test_name}...")
        if test_func():
            passed += 1
            print(f"‚úÖ {test_name} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå {test_name} –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –º–æ–¥—É–ª–µ–π –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç—ã")
    
    if passed == total:
        print("üéâ –í—Å–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ—à–ª–∏ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç—ã")
        return 1

if __name__ == '__main__':
    sys.exit(main())

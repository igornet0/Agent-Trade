#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è Trade Aggregator –º–æ–¥—É–ª—è
"""

import sys
import os

def test_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ TradeAggregatorService"""
    try:
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))
        from core.services.trade_aggregator_service import TradeAggregatorService
        print("‚úÖ TradeAggregatorService —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ TradeAggregatorService: {e}")
        return False

def test_class_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞"""
    try:
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))
        from core.services.trade_aggregator_service import TradeAggregatorService
        
        service = TradeAggregatorService()
        print("‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä TradeAggregatorService —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {e}")
        return False

def test_methods_exist():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
    try:
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))
        from core.services.trade_aggregator_service import TradeAggregatorService
        
        service = TradeAggregatorService()
        
        required_methods = [
            'train_model',
            'evaluate_model', 
            'predict',
            '_calculate_portfolio_metrics',
            '_aggregate_signals',
            '_apply_risk_management',
            '_create_ml_model',
            '_calculate_max_drawdown',
            '_save_model',
            'load_model'
        ]
        
        missing_methods = []
        for method in required_methods:
            if not hasattr(service, method):
                missing_methods.append(method)
        
        if missing_methods:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–æ–¥—ã: {missing_methods}")
            return False
        else:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–¥–æ–≤: {e}")
        return False

def test_config_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    try:
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))
        from core.services.trade_aggregator_service import TradeAggregatorService
        
        service = TradeAggregatorService()
        
        required_config_keys = [
            'mode',
            'weights',
            'thresholds', 
            'risk_limits',
            'portfolio'
        ]
        
        missing_keys = []
        for key in required_config_keys:
            if key not in service.default_config:
                missing_keys.append(key)
        
        if missing_keys:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {missing_keys}")
            return False
        else:
            print("‚úÖ –í—Å–µ –∫–ª—é—á–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ü—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Ç–µ—Å—Ç Trade Aggregator –º–æ–¥—É–ª—è...")
    
    tests = [
        test_import,
        test_class_creation,
        test_methods_exist,
        test_config_structure
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("‚úÖ –í—Å–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã Trade Aggregator –º–æ–¥—É–ª—è –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã Trade Aggregator –º–æ–¥—É–ª—è –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        return 1

if __name__ == '__main__':
    success = main()
    assert success, "Trade aggregator simple tests failed"

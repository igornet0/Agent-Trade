#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Trade Aggregator –º–æ–¥—É–ª—è –±–µ–∑ PyTorch –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import unittest
import sys
import os
from unittest.mock import Mock, patch, MagicMock
import pandas as pd
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

class TestTradeAggregatorServiceSimple(unittest.TestCase):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è TradeAggregatorService –±–µ–∑ PyTorch"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        # –ü–∞—Ç—á–∏–º –∏–º–ø–æ—Ä—Ç PyTorch —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        with patch.dict('sys.modules', {'torch': Mock()}):
            try:
                from core.services.trade_aggregator_service import TradeAggregatorService
                self.service = TradeAggregatorService()
            except ImportError as e:
                self.skipTest(f"TradeAggregatorService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ
        self.mock_df = pd.DataFrame({
            'timestamp': pd.date_range('2025-01-01', periods=100, freq='1h'),
            'open': np.random.uniform(100, 200, 100),
            'high': np.random.uniform(100, 200, 100),
            'low': np.random.uniform(100, 200, 100),
            'close': np.random.uniform(100, 200, 100),
            'volume': np.random.uniform(1000, 10000, 100)
        })
    
    def test_service_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.assertIsNotNone(self.service)
        self.assertTrue(hasattr(self.service, 'models_dir'))
    
    def test_aggregate_signals_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        pred_time_signals = [1, 1, 0, -1, 1]
        trade_time_signals = [0, 1, 1, 0, -1]
        risk_signals = [0.8, 0.3, 0.9, 0.2, 0.7]
        config = {'signal_weights': {'pred_time': 0.4, 'trade_time': 0.4, 'risk': 0.2}}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é
        result = self.service._aggregate_signals(pred_time_signals, trade_time_signals, risk_signals, config)
        
        self.assertIsInstance(result, dict)
        self.assertIn('decision', result)
        self.assertIn('confidence', result)
        self.assertIn('aggregated_score', result)
    
    def test_calculate_portfolio_metrics_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        positions = [
            {'coin_id': 'BTC', 'quantity': 1.0, 'avg_price': 50000, 'unrealized_pnl': 5000, 'size': 1.0, 'entry_price': 50000},
            {'coin_id': 'ETH', 'quantity': 10.0, 'avg_price': 3000, 'unrealized_pnl': 2000, 'size': 10.0, 'entry_price': 3000}
        ]
        
        balance = 100000
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        result = self.service._calculate_portfolio_metrics(positions, balance)
        
        self.assertIsInstance(result, dict)
        self.assertIn('total_value', result)
        self.assertIn('total_pnl', result)
        self.assertIn('total_return', result)
    
    def test_apply_risk_management_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
        decision = 1  # Buy signal
        position_size = 0.1  # 10% of portfolio
        portfolio_metrics = {'total_value': 100000, 'total_return': 0.05, 'exposure': 80000}
        config = {'max_position_size': 0.2, 'stop_loss_pct': 0.05}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        result = self.service._apply_risk_management(decision, position_size, portfolio_metrics, config)
        
        self.assertIsInstance(result, dict)
        self.assertIn('adjusted_signal', result)
        self.assertIn('position_size', result)
        self.assertIn('stop_loss', result)
    
    def test_calculate_max_drawdown_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏"""
        coin_data = [
            {'close': 100}, {'close': 98}, {'close': 102}, {'close': 99}, 
            {'close': 105}, {'close': 101}, {'close': 103}, {'close': 100}
        ]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Å–∞–¥–∫–∏
        result = self.service._calculate_max_drawdown(coin_data)
        
        self.assertIsInstance(result, float)
        self.assertLessEqual(result, 0)  # –ü—Ä–æ—Å–∞–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π
    
    def test_service_methods_exist(self):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
        required_methods = [
            '_aggregate_signals',
            '_calculate_portfolio_metrics',
            '_apply_risk_management',
            '_calculate_max_drawdown',
            'train_model',
            'predict'
        ]
        
        for method_name in required_methods:
            self.assertTrue(hasattr(self.service, method_name), 
                          f"–ú–µ—Ç–æ–¥ {method_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

def main():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ Trade Aggregator –º–æ–¥—É–ª—è...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    test_suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    loader = unittest.TestLoader()
    test_suite.addTest(loader.loadTestsFromTestCase(TestTradeAggregatorServiceSimple))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã: {result.testsRun} —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    print(f"–û—à–∏–±–æ–∫: {len(result.errors)}")
    print(f"–ü—Ä–æ–≤–∞–ª–æ–≤: {len(result.failures)}")
    
    if result.wasSuccessful():
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        return 1

if __name__ == '__main__':
    exit_code = main()
    assert exit_code == 0, "Trade aggregator simple tests failed"

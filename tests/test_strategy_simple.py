#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Strategy –º–æ–¥—É–ª—è –±–µ–∑ PyTorch –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import unittest
import sys
import os
from unittest.mock import Mock, patch, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

class TestStrategySimple(unittest.TestCase):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Strategy –º–æ–¥—É–ª—è"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        # –ü–∞—Ç—á–∏–º –∏–º–ø–æ—Ä—Ç PyTorch —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        with patch.dict('sys.modules', {'torch': Mock()}):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ strategy
                self.strategy_files = [
                    'src/backend/app/routers/strategy/router.py'
                ]
            except ImportError as e:
                self.skipTest(f"Strategy –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    
    def test_strategy_files_exist(self):
        """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ strategy"""
        for file_path in self.strategy_files:
            self.assertTrue(os.path.exists(file_path), f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def test_strategy_router_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã strategy router"""
        router_file = 'src/backend/app/routers/strategy/router.py'
        if os.path.exists(router_file):
            with open(router_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            self.assertIn('from fastapi import', content)
            self.assertIn('router = APIRouter', content)
            self.assertIn('@router.post', content)
            self.assertIn('@router.get', content)
            self.assertIn('@router.delete', content)
    
    def test_strategy_endpoints_exist(self):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints strategy"""
        router_file = 'src/backend/app/routers/strategy/router.py'
        if os.path.exists(router_file):
            with open(router_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints
            required_endpoints = [
                '/create',
                '/list',
                '/{strategy_id}'
            ]
            
            for endpoint in required_endpoints:
                self.assertIn(endpoint, content, f"Endpoint {endpoint} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def test_strategy_imports_exist(self):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ strategy"""
        router_file = 'src/backend/app/routers/strategy/router.py'
        if os.path.exists(router_file):
            with open(router_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            required_imports = [
                'from fastapi import',
                'from backend.app.configuration import',
                'from core.database.orm import'
            ]
            
            for import_line in required_imports:
                self.assertIn(import_line, content, f"–ò–º–ø–æ—Ä—Ç {import_line} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def test_strategy_schemas_exist(self):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è —Å—Ö–µ–º strategy"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ö–µ–º
        schema_files = [
            'src/backend/app/configuration/schemas/strategy.py'
        ]
        
        for schema_file in schema_files:
            if os.path.exists(schema_file):
                with open(schema_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞—Å—Å–æ–≤ —Å—Ö–µ–º
                self.assertIn('class Strategy', content)
                self.assertIn('class StrategyCreate', content)
                self.assertIn('class StrategyResponse', content)
    
    def test_strategy_orm_exist(self):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è ORM –º–æ–¥–µ–ª–µ–π strategy"""
        orm_file = 'src/core/database/orm/strategy.py'
        if os.path.exists(orm_file):
            with open(orm_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            required_functions = [
                'orm_create_strategy',
                'orm_get_strategy',
                'orm_get_strategies',
                'orm_delete_strategy'
            ]
            
            for func_name in required_functions:
                self.assertIn(f'def {func_name}', content, f"–§—É–Ω–∫—Ü–∏—è {func_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

def main():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ Strategy –º–æ–¥—É–ª—è...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    test_suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    loader = unittest.TestLoader()
    test_suite.addTest(loader.loadTestsFromTestCase(TestStrategySimple))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã: {result.testsRun} —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    print(f"–û—à–∏–±–æ–∫: {len(result.errors)}")
    print(f"–ü—Ä–æ–≤–∞–ª–æ–≤: {len(result.failures)}")
    
    if result.wasSuccessful():
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        return 1

if __name__ == '__main__':
    exit_code = main()
    assert exit_code == 0, "Strategy simple tests failed"

import requests
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

def test_ui_backend_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UI —Å backend"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Backend")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å frontend
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ frontend...")
    try:
        response = requests.get("http://localhost:5173", timeout=5)
        assert response.status_code == 200
        assert "Agent Trade" in response.text
        print("‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend...")
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "healthy"
        print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints —á–µ—Ä–µ–∑ frontend
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    try:
        response = requests.get("http://localhost:8000/api_db_agent/models", timeout=5)
        assert response.status_code == 200
        data = response.json()
        assert "models" in data
        assert len(data["models"]) > 0
        print(f"‚úÖ API –º–æ–¥–µ–ª–µ–π: {len(data['models'])} –º–æ–¥–µ–ª–µ–π")
    except Exception as e:
        print(f"‚ùå API –º–æ–¥–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ API...")
    try:
        test_payload = {
            "model_id": 1,
            "coins": [1, 2],
            "timeframe": "5m",
            "start_date": "2024-01-01",
            "end_date": "2024-01-02",
            "metrics": ["accuracy", "precision"]
        }
        
        response = requests.post("http://localhost:8000/api_db_agent/test_model", 
                               json=test_payload, timeout=10)
        assert response.status_code in [200, 202]
        data = response.json()
        assert "task_id" in data
        task_id = data["task_id"]
        print(f"‚úÖ –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—â–µ–Ω: {task_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        time.sleep(2)
        response = requests.get(f"http://localhost:8000/api_db_agent/task/{task_id}", timeout=5)
        assert response.status_code == 200
        task_data = response.json()
        assert "state" in task_data
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {task_data['state']}")
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        return False
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫...")
    try:
        response = requests.get("http://localhost:8000/metrics", timeout=5)
        assert response.status_code == 200
        metrics_text = response.text
        assert "http_requests_total" in metrics_text
        assert "ml_model_train_total" in metrics_text
        print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
    except Exception as e:
        print(f"‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        return False
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    print("\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    # Prometheus
    try:
        response = requests.get("http://localhost:9090/api/v1/targets", timeout=5)
        assert response.status_code == 200
        data = response.json()
        targets = data["data"]["activeTargets"]
        print(f"‚úÖ Prometheus: {len(targets)} targets")
    except Exception as e:
        print(f"‚ùå Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # Grafana
    try:
        response = requests.get("http://localhost:3000/api/health", timeout=5)
        assert response.status_code == 200
        data = response.json()
        assert data["database"] == "ok"
        print("‚úÖ Grafana –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã UI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True

def test_browser_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω Selenium)"""
    
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        
        driver = webdriver.Chrome(options=chrome_options)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        driver.get("http://localhost:5173")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = driver.title
        assert "Agent Trade" in title
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        root_element = driver.find_element(By.ID, "root")
        assert root_element.is_displayed()
        print("‚úÖ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
        
        driver.quit()
        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
        print("‚ÑπÔ∏è  –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ UI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    success = test_ui_backend_integration()
    
    # –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if success:
        test_browser_integration()
    
    if success:
        print("\nüéâ –í—Å–µ UI —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        exit(0)
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        exit(1)
